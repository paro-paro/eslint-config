import type { FlatESLintConfigItemExtended, StylisticOptions } from '../types'

/* eslint-disable perfectionist/sort-objects */
export function stylistic(files: string[], options: StylisticOptions): FlatESLintConfigItemExtended[] {
  const {
    jsx = true,
    indent = 2,
    quotes = 'single',
  } = options

  return [
    {
      files,
      name: 'config:stylistic',

      /* eslint-enable perfectionist/sort-objects */
      rules: {
        '@stylistic/array-bracket-spacing': ['error', 'never'],
        '@stylistic/arrow-parens': ['error', 'as-needed', { requireForBlockBody: true }],
        '@stylistic/arrow-spacing': ['error', { after: true, before: true }],
        '@stylistic/block-spacing': ['error', 'always'],
        '@stylistic/brace-style': ['error', 'stroustrup', { allowSingleLine: true }],
        '@stylistic/comma-dangle': ['error', 'always-multiline'],
        '@stylistic/comma-spacing': ['error', { after: true, before: false }],
        '@stylistic/comma-style': ['error', 'last'],
        '@stylistic/computed-property-spacing': ['error', 'never', { enforceForClassMembers: true }],
        '@stylistic/dot-location': ['error', 'property'],
        '@stylistic/eol-last': 'error',
        '@stylistic/indent': ['error', indent, {
          ArrayExpression: 1,
          CallExpression: { arguments: 1 },
          flatTernaryExpressions: false,
          FunctionDeclaration: { body: 1, parameters: 1 },
          FunctionExpression: { body: 1, parameters: 1 },
          ignoreComments: false,
          ignoredNodes: [
            'TemplateLiteral *',
            'JSXElement',
            'JSXElement > *',
            'JSXAttribute',
            'JSXIdentifier',
            'JSXNamespacedName',
            'JSXMemberExpression',
            'JSXSpreadAttribute',
            'JSXExpressionContainer',
            'JSXOpeningElement',
            'JSXClosingElement',
            'JSXFragment',
            'JSXOpeningFragment',
            'JSXClosingFragment',
            'JSXText',
            'JSXEmptyExpression',
            'JSXSpreadChild',
            'TSTypeParameterInstantiation',
            'FunctionExpression > .params[decorators.length > 0]',
            'FunctionExpression > .params > :matches(Decorator, :not(:first-child))',
            'ClassBody.body > PropertyDefinition[decorators.length > 0] > .key',
          ],
          ImportDeclaration: 1,
          MemberExpression: 1,
          ObjectExpression: 1,
          offsetTernaryExpressions: true,
          outerIIFEBody: 1,
          SwitchCase: 1,
          VariableDeclarator: 1,
        }],
        '@stylistic/key-spacing': ['error', { afterColon: true, beforeColon: false }],
        '@stylistic/keyword-spacing': ['error', { after: true, before: true }],
        '@stylistic/lines-between-class-members': ['error', 'always', { exceptAfterSingleLine: true }],
        '@stylistic/max-statements-per-line': ['error', { max: 1 }],
        '@stylistic/member-delimiter-style': ['error', { multiline: { delimiter: 'none' } }],
        '@stylistic/multiline-ternary': ['error', 'always-multiline'],
        '@stylistic/new-parens': 'error',
        '@stylistic/no-extra-parens': ['error', 'functions'],
        '@stylistic/no-floating-decimal': 'error',
        '@stylistic/no-mixed-operators': ['error', {
          allowSamePrecedence: true,
          groups: [
            ['==', '!=', '===', '!==', '>', '>=', '<', '<='],
            ['&&', '||'],
            ['in', 'instanceof'],
          ],
        }],
        '@stylistic/no-mixed-spaces-and-tabs': 'error',
        '@stylistic/no-multi-spaces': 'error',
        '@stylistic/no-multiple-empty-lines': ['error', { max: 1, maxBOF: 0, maxEOF: 0 }],
        '@stylistic/no-tabs': indent === 'tab' ? 'off' : 'error',
        '@stylistic/no-trailing-spaces': 'error',
        '@stylistic/no-whitespace-before-property': 'error',
        '@stylistic/object-curly-spacing': ['error', 'always'],
        '@stylistic/operator-linebreak': ['error', 'before'],
        '@stylistic/padded-blocks': ['error', { blocks: 'never', classes: 'never', switches: 'never' }],
        '@stylistic/quote-props': ['error', 'consistent-as-needed'],
        '@stylistic/quotes': ['error', quotes, { allowTemplateLiterals: true, avoidEscape: false }],
        '@stylistic/rest-spread-spacing': ['error', 'never'],
        '@stylistic/semi': ['error', 'never'],
        '@stylistic/semi-spacing': ['error', { after: true, before: false }],
        '@stylistic/space-before-blocks': ['error', 'always'],
        '@stylistic/space-before-function-paren': ['error', { anonymous: 'always', asyncArrow: 'always', named: 'never' }],
        '@stylistic/space-in-parens': ['error', 'never'],
        '@stylistic/space-infix-ops': 'error',
        '@stylistic/space-unary-ops': ['error', { nonwords: false, words: true }],
        '@stylistic/spaced-comment': ['error', 'always', {
          block: {
            balanced: true,
            exceptions: ['*'],
            markers: ['!'],
          },
          line: {
            exceptions: ['/', '#'],
            markers: ['/'],
          },
        }],
        '@stylistic/template-curly-spacing': 'error',
        '@stylistic/template-tag-spacing': ['error', 'never'],
        '@stylistic/type-annotation-spacing': ['error', {}],
        '@stylistic/wrap-iife': ['error', 'any', { functionPrototypeMethods: true }],
        '@stylistic/yield-star-spacing': ['error', 'both'],

        'antfu/consistent-list-newline': 'error',
        'antfu/if-newline': 'error',
        'antfu/top-level-function': 'error',

        'curly': ['error', 'multi-or-nest', 'consistent'],

        'import/newline-after-import': ['error', { considerComments: true, count: 1 }],

        ...jsx && {
          '@stylistic/jsx-closing-bracket-location': 'error',
          '@stylistic/jsx-closing-tag-location': 'error',
          '@stylistic/jsx-curly-brace-presence': ['error', { propElementValues: 'always' }],
          '@stylistic/jsx-curly-newline': 'error',
          '@stylistic/jsx-curly-spacing': ['error', 'never'],
          '@stylistic/jsx-equals-spacing': 'error',
          '@stylistic/jsx-first-prop-new-line': 'error',
          '@stylistic/jsx-indent': ['error', indent, { checkAttributes: true, indentLogicalExpressions: true }],
          '@stylistic/jsx-indent-props': ['error', indent],
          '@stylistic/jsx-max-props-per-line': ['error', { maximum: 1, when: 'multiline' }],
          '@stylistic/jsx-one-expression-per-line': ['error', { allow: 'single-child' }],
          '@stylistic/jsx-quotes': 'error',
          '@stylistic/jsx-tag-spacing': [
            'error',
            {
              afterOpening: 'never',
              beforeClosing: 'never',
              beforeSelfClosing: 'always',
              closingSlash: 'never',
            },
          ],
          '@stylistic/jsx-wrap-multilines': [
            'error',
            {
              arrow: 'parens-new-line',
              assignment: 'parens-new-line',
              condition: 'parens-new-line',
              declaration: 'parens-new-line',
              logical: 'parens-new-line',
              prop: 'parens-new-line',
              return: 'parens-new-line',
            },
          ],
        },
      },
    },
  ]
}
